[
["introduction.html", "Introduction to Multiomics Data Integration and Visualisation Chapter 1 Introduction", " Introduction to Multiomics Data Integration and Visualisation Jacques SERIZAY 2020-02-04 Chapter 1 Introduction Aging is the time-dependent functional decline that affects most living organisms. The accumulation of cellular damage is widely considered to be the general cause of aging, which explains why the studies from the last three decades have mostly focused on the cellular aspects of aging. Currently, the aging hallmarks are: genomic instability, telomere attrition, epigenetic alterations, loss of proteostasis, deregulated nutrient sensing, mitochondrial dysfunction, cellular senescence, stem cell exhaustion, and altered intercellular communication. However, aging should not be seen as a cellular disfunction but as an organismal process. All the cells within an organism are undergoing aging, and not all of them are aging simultaneously. Aging research was inaugurated following the isolation of the first long-lived strains in C. elegans. In the past three decades, the nematode played a fundamental role in aging research. It is a powerful model organism when it comes to studying aging: - It has a short life cycle (~ 21 days in normal conditions) - Mutants can be easily generated and phenotypically screened for aging defects - Its genome has been fully sequenced and presents fundamental resemblances with that of more complex metazoans. In this project, we will study … To build the HTML version of this set of files, you can use: bookdown::render_book(&#39;01-Day1.Rmd&#39;, output_format = &#39;bookdown::gitbook&#39;) "],
["proteomics.html", "Chapter 2 Proteomics 2.1 Set up environment 2.2 Load and inspect the data 2.3 Adding gene information 2.4 Separating into lists of tissue-specific proteins 2.5 Compare it to existing tissue-specific datasets from RNA-seq 2.6 Save the work!! 2.7 SessionInfo", " Chapter 2 Proteomics IMPORTANT: This project has been written by Jacques SERIZAY, for the purpose of analysing public datasets. Today you will be focusing on analyzing the proteomics data generated in Reinke et al., 2017: “In vivo mapping of tissue- and subcellular-specific proteomes in Caenorhabditis elegans.”, 2.1 Set up environment PROJECT_PATH &lt;- getwd() require(tidyverse) require(rtracklayer) require(org.Ce.eg.db) require(biomaRt) 2.2 Load and inspect the data The data has been fetched from online and reformatted for the purpose of the course. Get it in ./data/1602426_TableS4.csv. 2.2.1 Questions: How many proteins are studied? How many are in each tissue? proteomics &lt;- read.csv( file.path(PROJECT_PATH, &#39;data/1602426_TableS4_processed.csv&#39;), na.strings = &quot;NA&quot; ) str(proteomics) ## &#39;data.frame&#39;: 3722 obs. of 47 variables: ## $ UniProtKB : Factor w/ 3722 levels &quot;A0A0K3ARZ7&quot;,&quot;A0A0K3ATL6&quot;,..: 2014 2323 1806 3273 501 3028 745 764 304 3144 ... ## $ SET1_DPY7.NES.GFP : num 0 2.911 0 0.557 4.691 ... ## $ SET2_DPY7.NES.GFP : num 0 2.69 4.8 1.56 4 ... ## $ SET3_DPY7.NES.GFP : num 0 2.62 4.24 2.09 3.26 ... ## $ SET1_DPY7.NLS.GFP : num 0 0 0 0 1.67 ... ## $ SET2_DPY7.NLS.GFP : num 0 0 0 0 1.58 ... ## $ SET3_DPY7.NLS.GFP : num 0 0 0 0 1.55 ... ## $ SET1_DPY7.NLS.NES : num 0 -2.5115 0 -0.0692 -1.0943 ... ## $ SET2_DPY7.NLS.NES : num 0 0.318 -1.206 -1.942 -0.894 ... ## $ SET3_DPY7.NLS.NES : num 1.084 0.123 -1.204 -0.481 -1.004 ... ## $ SET1_MYO2.NES.GFP : num 0 0.855 0 0 2.036 ... ## $ SET2_MYO2.NES.GFP : num 0 0 0 0 1.46 ... ## $ SET3_MYO2.NES.GFP : num 0 0.616 0 1.369 0.807 ... ## $ SET1_MYO2.NLS.GFP : num 0 0 0 1.93 1.45 ... ## $ SET2_MYO2.NLS.GFP : num 0 0.446 0 0 0.264 ... ## $ SET3_MYO2.NLS.GFP : num 0 0.0176 0 0.467 0.6144 ... ## $ SET1_MYO2.NLS.NES : num 0 -3.679 0 0 0.252 ... ## $ SET2_MYO2.NLS.NES : num 0 0 0 0 0.219 ... ## $ SET3_MYO2.NLS.NES : num 0 0.335 0 -0.151 -0.114 ... ## $ SET1_MYO3.NES.GFP : num 0 1.75 0 0 2.23 ... ## $ SET2_MYO3.NES.GFP : num 0 0 0 0 2.17 ... ## $ SET3_MYO3.NES.GFP : num 0 0.703 0 0 0.534 ... ## $ SET1_MYO3.NLS.GFP : num 0.593 0 0 0 1.628 ... ## $ SET2_MYO3.NLS.GFP : num 0 1.08 0 0 1.33 ... ## $ SET3_MYO3.NLS.GFP : num 0 0.646 0 0 -0.219 ... ## $ SET1_MYO3.NLS.NES : num 0.426 -0.64 0 0 0.291 ... ## $ SET2_MYO3.NLS.NES : num 0 0.0187 0 0 0.1603 ... ## $ SET3_MYO3.NLS.NES : num 0 0.191 0 0 0.245 ... ## $ SET1_SPP5.NES.GFP : num -2.07 4.64 0 3.27 5.1 ... ## $ SET2_SPP5.NES.GFP : num 0 4.07 0 3.15 4.29 ... ## $ SET3_SPP5.NES.GFP : num 0 3.86 0 1.5 3.84 ... ## $ SET1_SPP5.NLS.GFP : num 0 0 0 0 0.875 ... ## $ SET2_SPP5.NLS.GFP : num 0 0 0 0 0.407 ... ## $ SET3_SPP5.NLS.GFP : num 0 1.005 0 0 0.844 ... ## $ SET1_SPP5.NLS.NES : num 0.0813 -1.3387 0 0.1852 -1.0459 ... ## $ SET2_SPP5.NLS.NES : num 0 -1.251 0 -0.777 -1.269 ... ## $ SET3_SPP5.NLS.NES : num 0 -1.52 0 -0.176 -1.445 ... ## $ Epidermis_cytoplasm : logi FALSE TRUE TRUE TRUE TRUE FALSE ... ## $ Epidermis_nucleus : logi FALSE FALSE FALSE FALSE TRUE FALSE ... ## $ Pharyngeal.muscle_cytoplasm: logi FALSE FALSE FALSE FALSE TRUE FALSE ... ## $ Pharyngeal.muscle_nucleus : logi FALSE FALSE FALSE FALSE FALSE FALSE ... ## $ Body.wall.muscle_cytoplasm : logi FALSE FALSE FALSE FALSE TRUE FALSE ... ## $ Body.wall.muscle_nucleus : logi FALSE FALSE FALSE FALSE TRUE FALSE ... ## $ Intestine_cytoplasm : logi FALSE TRUE FALSE TRUE TRUE TRUE ... ## $ Intestine_nucleus : logi FALSE FALSE FALSE FALSE FALSE TRUE ... ## $ Compartment.specific : Factor w/ 3 levels &quot;Cytoplasm and Nucleus specific&quot;,..: NA 2 2 NA 2 NA NA NA 3 2 ... ## $ Tissue.specific : Factor w/ 4 levels &quot;Body wall muscle specific&quot;,..: NA NA 2 NA NA NA NA NA NA NA ... 2.3 Adding gene information This file only contains the protein names. Eventually, we will be looking at genes as well. The simplest approach is to convert everything to unique gene IDs. For this, we will rely on BiomaRt. 2.3.1 Questions: What is the difference between Swissprot and Trembl? Why is there less annotations from SwissProt? Why does the original dataset contain both types of IDs? Are there proteins coming from the same gene? # ensembl &lt;- useDataset(&quot;celegans_gene_ensembl&quot;, mart = useMart(&quot;ensembl&quot;)) # ids &lt;- getBM( # attributes = c(&quot;uniprotswissprot&quot;, &quot;uniprotsptrembl&quot;, &quot;wormbase_gene&quot;), # mart = ensembl # ) # You can also get the ids table from the data folder: ids &lt;- read.table(&#39;data/proteins_genes_IDs.txt&#39;, header = TRUE, sep = &#39;\\t&#39;) ids$protID &lt;- paste0(ids$uniprotswissprot, ids$uniprotsptrembl) proteomics$WormBaseID &lt;- ids$wormbase_gene[match(proteomics$UniProtKB, ids$protID)] proteomics &lt;- proteomics[!is.na(proteomics$WormBaseID),] 2.4 Separating into lists of tissue-specific proteins Let’s figure out which proteins are specifically present in each tissue. 2.4.1 Questions: For each set of proteins, are they more cytoplasmic or nuclear-enriched? Which ones are transcription factors? (Hint: there is a list of all transcription factors annotated in C. elegans in the data folder…) Can you say anything about the tissue-specific TFs? What do you think about this? Are the number of tissue-specific TFs consistent with the number of total TFs? list_prots &lt;- lapply( levels(proteomics$Tissue.specific), function(TISSUE) { proteomics$UniProtKB %&gt;% &#39;[&#39;(proteomics$Tissue.specific == TISSUE &amp; !is.na(proteomics$Tissue.specific)) %&gt;% as.character() } ) %&gt;% setNames(levels(proteomics$Tissue.specific)) list_genes &lt;- lapply( levels(proteomics$Tissue.specific), function(TISSUE) { proteomics$WormBaseID %&gt;% &#39;[&#39;(proteomics$Tissue.specific == TISSUE &amp; !is.na(proteomics$Tissue.specific)) %&gt;% as.character() } ) %&gt;% setNames(levels(proteomics$Tissue.specific)) lengths(list_prots) ## Body wall muscle specific Epidermis specific ## 55 125 ## Intestine specific Pharyngeal muscle specific ## 130 21 tfs &lt;- readLines(&#39;data/TFs.txt&#39;) lapply(list_prots, function(prots) { prots[proteomics$WormBaseID[match(prots, proteomics$UniProtKB)] %in% tfs] }) ## $`Body wall muscle specific` ## [1] &quot;G5EC72&quot; &quot;Q9NEZ5&quot; &quot;Q9U3F4&quot; ## ## $`Epidermis specific` ## [1] &quot;Q27355&quot; ## ## $`Intestine specific` ## [1] &quot;G5EDA6&quot; &quot;Q19720&quot; &quot;H2KZZ0&quot; &quot;Q9NAD6&quot; ## ## $`Pharyngeal muscle specific` ## character(0) 2.5 Compare it to existing tissue-specific datasets from RNA-seq Let’s see if this set of proteins overlap with tissue-specific gene annotation. For this, we can use the data in ./data/gene_annotations.gff3. This is a .gff3 file, a format used to add specific information to gene annotations. 2.5.1 Questions: Explain the fundamental differences between the 2 sets of data? Are the experiments from the same developmental stage? Are the two datasets corresponding to each other? What are some good ways to represent the intersection between these datasets? genes &lt;- rtracklayer::import(&#39;data/gene_annotations.gff3&#39;) names(genes) &lt;- genes$ID lapply(list_genes, function(g) { table(genes[g]$which.tissues) }) ## $`Body wall muscle specific` ## ## Muscle Neurons_Muscle Neurons_Muscle_Intest. ## 34 3 2 ## Soma Ubiq. Ubiq.-Biased ## 3 4 5 ## Unclassified ## 4 ## ## $`Epidermis specific` ## ## Germline_Hypod. Germline_Neurons_Muscle_Hypod. ## 1 5 ## Hypod. Intest. ## 41 1 ## Low Neurons_Intest. ## 4 1 ## Neurons_Muscle_Hypod. Soma ## 1 7 ## Ubiq. Ubiq.-Biased ## 19 35 ## Unclassified ## 10 ## ## $`Intestine specific` ## ## Germline Hypod. Hypod._Intest. ## 2 2 2 ## Intest. Low Muscle_Hypod._Intest. ## 39 3 1 ## Muscle_Intest. Neurons Neurons_Muscle_Intest. ## 2 1 11 ## Soma Ubiq. Ubiq.-Biased ## 5 15 29 ## Unclassified ## 18 ## ## $`Pharyngeal muscle specific` ## ## Germline_Neurons_Muscle Low Muscle ## 1 7 2 ## Neurons_Muscle Neurons_Muscle_Intest. Soma ## 1 3 1 ## Ubiq.-Biased Unclassified ## 2 4 2.6 Save the work!! save.image(&#39;results/Day2.RData&#39;) 2.7 SessionInfo ## R version 3.5.2 (2018-12-20) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 18.04.2 LTS ## ## Matrix products: default ## BLAS: /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.7.1 ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.7.1 ## ## locale: ## [1] LC_CTYPE=en_GB.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=en_GB.UTF-8 LC_COLLATE=en_GB.UTF-8 ## [5] LC_MONETARY=en_GB.UTF-8 LC_MESSAGES=en_GB.UTF-8 ## [7] LC_PAPER=en_GB.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] parallel stats4 stats graphics grDevices utils datasets ## [8] methods base ## ## other attached packages: ## [1] biomaRt_2.38.0 org.Ce.eg.db_3.7.0 AnnotationDbi_1.44.0 ## [4] Biobase_2.42.0 rtracklayer_1.42.2 GenomicRanges_1.34.0 ## [7] GenomeInfoDb_1.18.2 IRanges_2.16.0 S4Vectors_0.20.1 ## [10] BiocGenerics_0.28.0 forcats_0.4.0 stringr_1.4.0 ## [13] dplyr_0.8.0.1 purrr_0.3.2 readr_1.3.1 ## [16] tidyr_0.8.3 tibble_2.1.1 ggplot2_3.1.1 ## [19] tidyverse_1.2.1 ## ## loaded via a namespace (and not attached): ## [1] httr_1.4.0 bit64_0.9-7 ## [3] jsonlite_1.6 modelr_0.1.4 ## [5] assertthat_0.2.1 blob_1.1.1 ## [7] GenomeInfoDbData_1.2.0 cellranger_1.1.0 ## [9] Rsamtools_1.34.1 progress_1.2.0 ## [11] yaml_2.2.0 pillar_1.3.1 ## [13] RSQLite_2.1.1 backports_1.1.3 ## [15] lattice_0.20-38 glue_1.3.1 ## [17] digest_0.6.18 XVector_0.22.0 ## [19] rvest_0.3.2 colorspace_1.4-1 ## [21] htmltools_0.3.6 Matrix_1.2-17 ## [23] plyr_1.8.4 XML_3.98-1.19 ## [25] pkgconfig_2.0.2 broom_0.5.1 ## [27] haven_2.1.0 bookdown_0.9.2 ## [29] zlibbioc_1.28.0 scales_1.0.0 ## [31] BiocParallel_1.16.6 generics_0.0.2 ## [33] withr_2.1.2 SummarizedExperiment_1.12.0 ## [35] lazyeval_0.2.2 cli_1.1.0 ## [37] magrittr_1.5 crayon_1.3.4 ## [39] readxl_1.3.1 memoise_1.1.0 ## [41] evaluate_0.13 nlme_3.1-137 ## [43] xml2_1.2.0 prettyunits_1.0.2 ## [45] tools_3.5.2 hms_0.4.2 ## [47] matrixStats_0.54.0 munsell_0.5.0 ## [49] DelayedArray_0.8.0 Biostrings_2.50.2 ## [51] compiler_3.5.2 rlang_0.4.2 ## [53] grid_3.5.2 RCurl_1.95-4.12 ## [55] rstudioapi_0.10 bitops_1.0-6 ## [57] rmarkdown_1.12.6 gtable_0.3.0 ## [59] DBI_1.0.0 R6_2.4.0 ## [61] GenomicAlignments_1.18.1 lubridate_1.7.4 ## [63] knitr_1.22 bit_1.1-14 ## [65] stringi_1.3.1 Rcpp_1.0.1 ## [67] tidyselect_0.2.5 xfun_0.5 "],
["atac-seq.html", "Chapter 3 ATAC-seq 3.1 Set up environment 3.2 Load preveious work 3.3 Get the ATAC-seq aging data 3.4 Investigate the genes associated to varying promoters during aging 3.5 SessionInfo", " Chapter 3 ATAC-seq IMPORTANT: This project has been written by Jacques SERIZAY, for the purpose of analysing public datasets. Today you will be focusing on investigating the ATAC-seq data generated in Janes et al., 2018: “Chromatin accessibility dynamics across C. elegans development and ageing”. 3.1 Set up environment PROJECT_PATH &lt;- getwd() require(tidyverse) require(rtracklayer) require(org.Ce.eg.db) require(biomaRt) 3.2 Load preveious work load(&#39;results/Day2.RData&#39;) 3.3 Get the ATAC-seq aging data The data can be found online or reformatted for the purpose of the course in ./data/ATAC-seq.gff3 3.3.1 Questions: Which format is the ATAC-seq.gff3 file? What does the file contain? Look at the cluster information: can you visualize variations of promoter accessibility during aging? // (boxplot) To be even better: look into Seqplots software… In which tissue(s) are the associated genes transcribed &amp; translated? (Hint: relate to yesterday’s work…) 3.4 Investigate the genes associated to varying promoters during aging 3.4.1 Questions: What is the function of genes going up (down) during aging? // gProfiler What are their counterpart in mammals? // BiomaRt What are the diseases associated to these genes? // DOSE package?? Comment on the rationale of the analysis: we are looking at genes associated to promoters de-regulated during aging… 3.5 SessionInfo ## R version 3.5.2 (2018-12-20) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 18.04.2 LTS ## ## Matrix products: default ## BLAS: /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.7.1 ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.7.1 ## ## locale: ## [1] LC_CTYPE=en_GB.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=en_GB.UTF-8 LC_COLLATE=en_GB.UTF-8 ## [5] LC_MONETARY=en_GB.UTF-8 LC_MESSAGES=en_GB.UTF-8 ## [7] LC_PAPER=en_GB.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] parallel stats4 stats graphics grDevices utils datasets ## [8] methods base ## ## other attached packages: ## [1] biomaRt_2.38.0 org.Ce.eg.db_3.7.0 AnnotationDbi_1.44.0 ## [4] Biobase_2.42.0 rtracklayer_1.42.2 GenomicRanges_1.34.0 ## [7] GenomeInfoDb_1.18.2 IRanges_2.16.0 S4Vectors_0.20.1 ## [10] BiocGenerics_0.28.0 forcats_0.4.0 stringr_1.4.0 ## [13] dplyr_0.8.0.1 purrr_0.3.2 readr_1.3.1 ## [16] tidyr_0.8.3 tibble_2.1.1 ggplot2_3.1.1 ## [19] tidyverse_1.2.1 ## ## loaded via a namespace (and not attached): ## [1] httr_1.4.0 bit64_0.9-7 ## [3] jsonlite_1.6 modelr_0.1.4 ## [5] assertthat_0.2.1 blob_1.1.1 ## [7] GenomeInfoDbData_1.2.0 cellranger_1.1.0 ## [9] Rsamtools_1.34.1 progress_1.2.0 ## [11] yaml_2.2.0 pillar_1.3.1 ## [13] RSQLite_2.1.1 backports_1.1.3 ## [15] lattice_0.20-38 glue_1.3.1 ## [17] digest_0.6.18 XVector_0.22.0 ## [19] rvest_0.3.2 colorspace_1.4-1 ## [21] htmltools_0.3.6 Matrix_1.2-17 ## [23] plyr_1.8.4 XML_3.98-1.19 ## [25] pkgconfig_2.0.2 broom_0.5.1 ## [27] haven_2.1.0 bookdown_0.9.2 ## [29] zlibbioc_1.28.0 scales_1.0.0 ## [31] BiocParallel_1.16.6 generics_0.0.2 ## [33] withr_2.1.2 SummarizedExperiment_1.12.0 ## [35] lazyeval_0.2.2 cli_1.1.0 ## [37] magrittr_1.5 crayon_1.3.4 ## [39] readxl_1.3.1 memoise_1.1.0 ## [41] evaluate_0.13 nlme_3.1-137 ## [43] xml2_1.2.0 prettyunits_1.0.2 ## [45] tools_3.5.2 hms_0.4.2 ## [47] matrixStats_0.54.0 munsell_0.5.0 ## [49] DelayedArray_0.8.0 Biostrings_2.50.2 ## [51] compiler_3.5.2 rlang_0.4.2 ## [53] grid_3.5.2 RCurl_1.95-4.12 ## [55] rstudioapi_0.10 bitops_1.0-6 ## [57] rmarkdown_1.12.6 gtable_0.3.0 ## [59] DBI_1.0.0 R6_2.4.0 ## [61] GenomicAlignments_1.18.1 lubridate_1.7.4 ## [63] knitr_1.22 bit_1.1-14 ## [65] stringi_1.3.1 Rcpp_1.0.1 ## [67] tidyselect_0.2.5 xfun_0.5 "],
["chip-seq.html", "Chapter 4 ChIP-seq 4.1 Set up environment 4.2 Load previous work 4.3 Get the ChIP-seq data 4.4 Investigate the TFs associated to varying promoters during aging 4.5 Defining key TFs involved in aging? 4.6 SessionInfo", " Chapter 4 ChIP-seq IMPORTANT: This project has been written by Jacques SERIZAY, for the purpose of analysing public datasets. Today you will be focusing on investigating ChIP-seq data generated by the modENCODE consortium, to understand which TFs are regulating the promoters which are varying during aging 4.1 Set up environment PROJECT_PATH &lt;- getwd() require(tidyverse) require(rtracklayer) require(org.Ce.eg.db) require(biomaRt) 4.2 Load previous work load(&#39;results/Day3.RData&#39;) 4.3 Get the ChIP-seq data 4.3.1 Questions: What is modENCODE? How to download all the data from modENCODE? What useful format can be used here to easily get information on TF binding profiles? Is .bed format better than .bw format for our purpose? Why? 4.4 Investigate the TFs associated to varying promoters during aging 4.4.1 Questions: How to summarize all the modENCODE data? Which metric should be calculated to see if a TF is enriched in a set of promoters? How can you represent the importance of all TFs in each cluster? Can you define binding motifs for the TFs enriched in some clusters? 4.5 Defining key TFs involved in aging? 4.5.1 Questions: Is there a group of motifs functionally interacting? What can you find in the literature about these factors? 4.6 SessionInfo ## R version 3.5.2 (2018-12-20) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 18.04.2 LTS ## ## Matrix products: default ## BLAS: /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.7.1 ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.7.1 ## ## locale: ## [1] LC_CTYPE=en_GB.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=en_GB.UTF-8 LC_COLLATE=en_GB.UTF-8 ## [5] LC_MONETARY=en_GB.UTF-8 LC_MESSAGES=en_GB.UTF-8 ## [7] LC_PAPER=en_GB.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] parallel stats4 stats graphics grDevices utils datasets ## [8] methods base ## ## other attached packages: ## [1] biomaRt_2.38.0 org.Ce.eg.db_3.7.0 AnnotationDbi_1.44.0 ## [4] Biobase_2.42.0 rtracklayer_1.42.2 GenomicRanges_1.34.0 ## [7] GenomeInfoDb_1.18.2 IRanges_2.16.0 S4Vectors_0.20.1 ## [10] BiocGenerics_0.28.0 forcats_0.4.0 stringr_1.4.0 ## [13] dplyr_0.8.0.1 purrr_0.3.2 readr_1.3.1 ## [16] tidyr_0.8.3 tibble_2.1.1 ggplot2_3.1.1 ## [19] tidyverse_1.2.1 ## ## loaded via a namespace (and not attached): ## [1] httr_1.4.0 bit64_0.9-7 ## [3] jsonlite_1.6 modelr_0.1.4 ## [5] assertthat_0.2.1 blob_1.1.1 ## [7] GenomeInfoDbData_1.2.0 cellranger_1.1.0 ## [9] Rsamtools_1.34.1 progress_1.2.0 ## [11] yaml_2.2.0 pillar_1.3.1 ## [13] RSQLite_2.1.1 backports_1.1.3 ## [15] lattice_0.20-38 glue_1.3.1 ## [17] digest_0.6.18 XVector_0.22.0 ## [19] rvest_0.3.2 colorspace_1.4-1 ## [21] htmltools_0.3.6 Matrix_1.2-17 ## [23] plyr_1.8.4 XML_3.98-1.19 ## [25] pkgconfig_2.0.2 broom_0.5.1 ## [27] haven_2.1.0 bookdown_0.9.2 ## [29] zlibbioc_1.28.0 scales_1.0.0 ## [31] BiocParallel_1.16.6 generics_0.0.2 ## [33] withr_2.1.2 SummarizedExperiment_1.12.0 ## [35] lazyeval_0.2.2 cli_1.1.0 ## [37] magrittr_1.5 crayon_1.3.4 ## [39] readxl_1.3.1 memoise_1.1.0 ## [41] evaluate_0.13 nlme_3.1-137 ## [43] xml2_1.2.0 prettyunits_1.0.2 ## [45] tools_3.5.2 hms_0.4.2 ## [47] matrixStats_0.54.0 munsell_0.5.0 ## [49] DelayedArray_0.8.0 Biostrings_2.50.2 ## [51] compiler_3.5.2 rlang_0.4.2 ## [53] grid_3.5.2 RCurl_1.95-4.12 ## [55] rstudioapi_0.10 bitops_1.0-6 ## [57] rmarkdown_1.12.6 gtable_0.3.0 ## [59] DBI_1.0.0 R6_2.4.0 ## [61] GenomicAlignments_1.18.1 lubridate_1.7.4 ## [63] knitr_1.22 bit_1.1-14 ## [65] stringi_1.3.1 Rcpp_1.0.1 ## [67] tidyselect_0.2.5 xfun_0.5 "]
]
